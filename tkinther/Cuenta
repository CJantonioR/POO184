import tkinter as tk
from tkinter import messagebox


class Cuenta:
    def __init__(self, noCuenta, titular, edad, saldo):
        self.__noCuenta = noCuenta
        self.__titular = titular
        self.__edad = edad
        self.__saldo = saldo

    def consultar(self):
        # Devuelve el saldo de la cuenta
        return self.__saldo

    def ingresar(self, cantidad):
        if cantidad <= 0:
            messagebox.showerror("Error", "La cantidad debe ser mayor a cero")
            return
        self.__saldo += cantidad
        messagebox.showinfo(
            "Ingreso de efectivo",
            f"Se ha ingresado {cantidad} pesos\nNuevo saldo: {self.__saldo}",
        )

    def retirar(self, cantidad):
        if cantidad <= 0:
            messagebox.showerror("Error", "La cantidad debe ser mayor a cero")
            return
        if cantidad > self.__saldo:
            messagebox.showerror("Error", "Saldo insuficiente")
            return
        self.__saldo -= cantidad
        messagebox.showinfo(
            "Retiro de efectivo",
            f"Se ha retirado {cantidad} pesos\nNuevo saldo: {self.__saldo}",
        )

    def depositar(self, otraCuenta, cantidad):
        if cantidad <= 0:
            messagebox.showerror("Error", "La cantidad debe ser mayor a cero")
            return
        if cantidad > self.__saldo:
            messagebox.showerror("Error", "Saldo insuficiente")
            return
        self.__saldo -= cantidad
        otraCuenta.ingresar(cantidad)
        messagebox.showinfo(
            "Depósito a otra cuenta",
            f"Se ha depositado {cantidad} pesos en la cuenta {otraCuenta.noCuenta}\nNuevo saldo en la cuenta origen: {self.__saldo}",
        )

    @property
    def noCuenta(self):
        return self.__noCuenta

    @property
    def titular(self):
        return self.__titular

    @property
    def edad(self):
        return self.__edad

    @property
    def saldo(self):
        return self.__saldo


class OtraCuenta(Cuenta):
    pass


class CajaPopularApp:
    def __init__(self, master):
        self.master = master
        master.title("Caja Popular")

        # Crear la cuenta
        self.cuenta = Cuenta(1, "Juan Perez", 25, 1000)

        # Frame para el formulario de cuenta
        self.cuenta_frame = tk.Frame(master)
        self.cuenta_frame.pack(padx=20, pady=10)

        # Label para mostrar el número de cuenta
        self.noCuenta_label = tk.Label(self.cuenta_frame, text="No. Cuenta:")
        self.noCuenta_label.grid(row=0, column=0)

        # Label para mostrar el titular de la cuenta
        self.titular_label = tk.Label(self.cuenta_frame, text="Titular:")
        self.titular_label.grid(row=1, column=0)

        # Label para mostrar la edad del titular de la cuenta
        self.edad_label = tk.Label(self.cuenta_frame, text="Edad:")
        self.edad_label.grid(row=2, column=0)

        # Label para mostrar el saldo de la cuenta
        self.saldo_label = tk.Label(self.cuenta_frame, text="Saldo:")
         self.noCuenta_entry = tk.Entry(self.cuenta_frame)
            self.noCuenta_entry.grid(row=0, column=1)

        # Label y Entry para el titular de la cuenta
        self.titular_label = tk.Label(self.cuenta_frame, text="Titular:")
        self.titular_label.grid(row=1, column=0)

        self.titular_entry = tk.Entry(self.cuenta_frame)
        self.titular_entry.grid(row=1, column=1)

        # Label y Entry para la edad del titular de la cuenta
        self.edad_label = tk.Label(self.cuenta_frame, text="Edad:")
        self.edad_label.grid(row=2, column=0)

        self.edad_entry = tk.Entry(self.cuenta_frame)
        self.edad_entry.grid(row=2, column=1)

        # Label y Entry para el saldo de la cuenta
        self.saldo_label = tk.Label(self.cuenta_frame, text="Saldo:")
        self.saldo_label.grid(row=3, column=0)

        self.saldo_entry = tk.Entry(self.cuenta_frame)
        self.saldo_entry.grid(row=3, column=1)

        # Botones para realizar operaciones en la cuenta
        self.consultar_button = tk.Button(self.cuenta_frame, text="Consultar saldo", command=self.mostrar_saldo)
        self.consultar_button.grid(row=4, column=0, pady=10)

        self.ingresar_button = tk.Button(self.cuenta_frame, text="Ingresar dinero", command=self.ingresar_dinero)
        self.ingresar_button.grid(row=4, column=1, pady=10)

        self.retirar_button = tk.Button(self.cuenta_frame, text="Retirar dinero", command=self.retirar_dinero)
        self.retirar_button.grid(row=5, column=0, pady=10)

        self.depositar_button = tk.Button(self.cuenta_frame, text="Depositar a otra cuenta", command=self.depositar_dinero)
        self.depositar_button.grid(row=5, column=1, pady=10)

        # Crear objeto cuenta con los datos ingresados en el formulario
        self.cuenta = Cuenta(
        self.noCuenta_entry.get(),
        self.titular_entry.get(),
        self.edad_entry.get(),
        self.saldo_entry.get()
    )

    def mostrar_saldo(self):
        self.cuenta.consultar()

    def ingresar_dinero(self):
        cantidad = float(tk.simpledialog.askstring("Ingresar dinero", "Monto a ingresar"))
        self.cuenta.ingresar(cantidad)

    def retirar_dinero(self):
        cantidad = float(tk.simpledialog.askstring("Retirar dinero", "Monto a retirar"))
        self.cuenta.retirar(cantidad)

    def depositar_dinero(self):
        noCuenta = tk.simpledialog.askstring("Depositar a otra cuenta", "No. Cuenta destino")
        cantidad = float(tk.simpledialog.askstring("Depositar a otra cuenta", "Monto a depositar"))
        otra_cuenta = OtraCuenta(noCuenta, "Titular de otra cuenta", 30, 1000)
        self.cuenta.depositar(otra_cuenta, cantidad)
        
        if name == "main":
root = tk.Tk()
app = CajaPopularApp(root)
root.mainloop()

